"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { useRouter } from "next/navigation";

export default function CreateExam() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [examData, setExamData] = useState({
    title: "",
    description: "",
    duration: 60,
    code: "",
    materials: [] as File[],
    instructions: "", // AI ÌîÑÎ°¨ÌîÑÌä∏ Ï∂îÍ∞Ä
  });
  const [questions, setQuestions] = useState<Question[]>([]);

  interface Question {
    id: string;
    text: string;
    type: "multiple-choice" | "essay" | "short-answer";
    options?: string[];
    correctAnswer?: string;
    core_ability?: string; // Î¨∏Ï†ú ÌïµÏã¨ Ïó≠Îüâ - AI ÌîÑÎ°¨ÌîÑÌä∏Ïóê ÏÇ¨Ïö©
    isAutoGenerated?: boolean; // ÏûêÎèô ÏÉùÏÑ± Ïó¨Î∂Ä
    isGenerating?: boolean; // AI ÏÉùÏÑ± Ï§ë ÏÉÅÌÉú
    aiCommand?: string; // AIÏóêÍ≤å ÎÇ¥Î¶¥ Î™ÖÎ†πÏñ¥
  }

  const generateExamCode = () => {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    let result = "";
    for (let i = 0; i < 6; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    setExamData((prev) => ({ ...prev, code: result }));
  };

  const generateQuestionWithAI = async (questionId: string) => {
    if (!examData.title || !examData.description) {
      alert("ÏãúÌóò Ï†úÎ™©Í≥º ÏÑ§Î™ÖÏùÑ Î®ºÏ†Ä ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }

    const currentQuestion = questions.find((q) => q.id === questionId);
    if (!currentQuestion) return;

    // Ìï¥Îãπ Î¨∏Ï†úÏùò Î°úÎî© ÏÉÅÌÉú ÏÑ§Ï†ï
    setQuestions(
      questions.map((q) =>
        q.id === questionId ? { ...q, isGenerating: true } : q
      )
    );

    try {
      let prompt;

      if (currentQuestion.aiCommand && currentQuestion.aiCommand.trim()) {
        // AI Î™ÖÎ†πÏñ¥Í∞Ä ÏûàÎäî Í≤ΩÏö∞ - Í∏∞Ï°¥ Î¨∏Ï†úÎ•º ÏàòÏ†ï
        prompt = `ÎãπÏã†ÏùÄ Ï†ÑÎ¨∏ ÏãúÌóò Ï∂úÏ†úÏûêÏûÖÎãàÎã§. Îã§Ïùå Ï†ïÎ≥¥Î•º Î∞îÌÉïÏúºÎ°ú Í∏∞Ï°¥ Î¨∏Ï†úÎ•º ÏàòÏ†ïÌï¥Ï£ºÏÑ∏Ïöî.

ÏãúÌóò Ï†ïÎ≥¥:
- Ï†úÎ™©: ${examData.title}
- ÏÑ§Î™Ö: ${examData.description}
- ÏãúÍ∞Ñ: ${examData.duration}Î∂Ñ
${examData.instructions ? `- AI ÏÑ§Ï†ï: ${examData.instructions}` : ""}

Í∏∞Ï°¥ Î¨∏Ï†ú:
${currentQuestion.text}

ÏàòÏ†ï ÏöîÏ≤≠: ${currentQuestion.aiCommand}

ÏöîÍµ¨ÏÇ¨Ìï≠:
1. Í∏∞Ï°¥ Î¨∏Ï†úÎ•º Î∞îÌÉïÏúºÎ°ú ÏÇ¨Ïö©ÏûêÏùò ÏöîÏ≤≠ÏÇ¨Ìï≠ÏùÑ Î∞òÏòÅÌïòÏó¨ ÏàòÏ†ïÌïòÏÑ∏Ïöî.
2. Î¨∏Ï†úÏùò ÍµêÏú°Ï†Å Í∞ÄÏπòÎ•º Ïú†ÏßÄÌïòÎ©¥ÏÑú ÏöîÏ≤≠ÏÇ¨Ìï≠ÏùÑ Ï∂©Ï°±ÏãúÌÇ§ÏÑ∏Ïöî.
3. Ï†ïÎãµÏùÑ ÏßÅÏ†ë Ï†úÍ≥µÌïòÏßÄ ÎßêÍ≥†, ÌïôÏÉùÏù¥ ÏÇ¨Í≥†Î†•ÏùÑ Î∞úÌúòÌï† Ïàò ÏûàÎèÑÎ°ù ÌïòÏÑ∏Ïöî.
4. ÏàòÏ†ïÎêú Î¨∏Ï†úÏùò ÌïµÏã¨ Ïó≠ÎüâÏùÑ Ìï®Íªò Ï†úÏïàÌï¥Ï£ºÏÑ∏Ïöî.

ÏùëÎãµ ÌòïÏãù:
Î¨∏Ï†ú: [ÏàòÏ†ïÎêú Î¨∏Ï†ú ÎÇ¥Ïö©]

ÌïµÏã¨ Ïó≠Îüâ: [Î¨∏Ï†úÏùò ÌïµÏã¨ Ïó≠Îüâ ÏÑ§Î™Ö]`;
      } else {
        // AI Î™ÖÎ†πÏñ¥Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ - ÏÉà Î¨∏Ï†ú ÏÉùÏÑ±
        prompt = `ÎãπÏã†ÏùÄ Ï†ÑÎ¨∏ ÏãúÌóò Ï∂úÏ†úÏûêÏûÖÎãàÎã§. Îã§Ïùå Ï†ïÎ≥¥Î•º Î∞îÌÉïÏúºÎ°ú Ï†ÅÏ†àÌïú ÏãúÌóò Î¨∏Ï†úÎ•º 1Í∞ú ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.

ÏãúÌóò Ï†ïÎ≥¥:
- Ï†úÎ™©: ${examData.title}
- ÏÑ§Î™Ö: ${examData.description}
- ÏãúÍ∞Ñ: ${examData.duration}Î∂Ñ
${examData.instructions ? `- AI ÏÑ§Ï†ï: ${examData.instructions}` : ""}

ÏöîÍµ¨ÏÇ¨Ìï≠:
1. ÏãúÌóòÏùò ÎÇúÏù¥ÎèÑÏôÄ ÎÇ¥Ïö©Ïóê ÎßûÎäî Ï†ÅÏ†àÌïú Î¨∏Ï†úÎ•º ÏÉùÏÑ±ÌïòÏÑ∏Ïöî.
2. Î¨∏Ï†úÎäî Î™ÖÌôïÌïòÍ≥† ÍµêÏú°Ï†ÅÏúºÎ°ú ÏùòÎØ∏ ÏûàÏñ¥Ïïº Ìï©ÎãàÎã§.
3. Ï†ïÎãµÏùÑ ÏßÅÏ†ë Ï†úÍ≥µÌïòÏßÄ ÎßêÍ≥†, ÌïôÏÉùÏù¥ ÏÇ¨Í≥†Î†•ÏùÑ Î∞úÌúòÌï† Ïàò ÏûàÎèÑÎ°ù ÌïòÏÑ∏Ïöî.
4. Î¨∏Ï†úÏùò ÌïµÏã¨ Ïó≠ÎüâÏùÑ Ìï®Íªò Ï†úÏïàÌï¥Ï£ºÏÑ∏Ïöî.

ÏùëÎãµ ÌòïÏãù:
Î¨∏Ï†ú: [ÏÉùÏÑ±Îêú Î¨∏Ï†ú ÎÇ¥Ïö©]

ÌïµÏã¨ Ïó≠Îüâ: [Î¨∏Ï†úÏùò ÌïµÏã¨ Ïó≠Îüâ ÏÑ§Î™Ö]`;
      }

      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          message: prompt,
          sessionId: "temp_generate_question",
          examTitle: examData.title,
          examCode: examData.code,
        }),
      });

      if (!response.ok) {
        throw new Error("AI Î¨∏Ï†ú ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }

      const data = await response.json();
      const aiResponse = data.response;

      // AI ÏùëÎãµÏóêÏÑú Î¨∏Ï†úÏôÄ ÌïµÏã¨ Ïó≠ÎüâÏùÑ ÌååÏã±
      const problemMatch = aiResponse.match(/Î¨∏Ï†ú:\s*(.+?)(?:\n|$)/);
      const coreAbilityMatch = aiResponse.match(/ÌïµÏã¨ Ïó≠Îüâ:\s*(.+?)(?:\n|$)/);

      const problemText = problemMatch ? problemMatch[1].trim() : aiResponse;
      const coreAbilityText = coreAbilityMatch
        ? coreAbilityMatch[1].trim()
        : "Î¨∏Ï†ú Ìï¥Í≤∞ Îä•Î†•";

      // Ìï¥Îãπ Î¨∏Ï†ú ÏóÖÎç∞Ïù¥Ìä∏
      setQuestions(
        questions.map((q) =>
          q.id === questionId
            ? {
                ...q,
                text: problemText,
                core_ability: coreAbilityText,
                isAutoGenerated: true,
                isGenerating: false,
                aiCommand:
                  currentQuestion.aiCommand && currentQuestion.aiCommand.trim()
                    ? "" // Î™ÖÎ†πÏñ¥ ÏÇ¨Ïö© ÌõÑ Ï¥àÍ∏∞Ìôî
                    : q.aiCommand,
              }
            : q
        )
      );
    } catch (error) {
      console.error("AI Î¨∏Ï†ú ÏÉùÏÑ± Ïò§Î•ò:", error);
      alert("Î¨∏Ï†ú ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.");

      // ÏóêÎü¨ Î∞úÏÉù Ïãú Î°úÎî© ÏÉÅÌÉú Ìï¥Ï†ú
      setQuestions(
        questions.map((q) =>
          q.id === questionId ? { ...q, isGenerating: false } : q
        )
      );
    }
  };

  // ÌéòÏù¥ÏßÄ ÏßÑÏûÖ Ïãú ÏûêÎèôÏúºÎ°ú ÏãúÌóò ÏΩîÎìú ÏÉùÏÑ±
  useEffect(() => {
    generateExamCode();
  }, []);

  const validateFile = (file: File): boolean => {
    const allowedTypes = [
      "application/pdf",
      "application/vnd.ms-powerpoint",
      "application/vnd.openxmlformats-officedocument.presentationml.presentation",
      "application/msword",
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
      "image/jpeg",
      "image/png",
      "image/gif",
      "image/webp",
    ];

    const maxSize = 10 * 1024 * 1024; // 10MB

    if (!allowedTypes.includes(file.type)) {
      alert(
        "ÏßÄÏõêÎêòÏßÄ ÏïäÎäî ÌååÏùº ÌòïÏãùÏûÖÎãàÎã§. PDF, PPT, ÏõåÎìú, Ïù¥ÎØ∏ÏßÄ ÌååÏùºÎßå ÏóÖÎ°úÎìú Í∞ÄÎä•Ìï©ÎãàÎã§."
      );
      return false;
    }

    if (file.size > maxSize) {
      alert("ÌååÏùº ÌÅ¨Í∏∞Í∞Ä 10MBÎ•º Ï¥àÍ≥ºÌï©ÎãàÎã§.");
      return false;
    }

    return true;
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    const validFiles = files.filter(validateFile);

    setExamData((prev) => ({
      ...prev,
      materials: [...prev.materials, ...validFiles],
    }));

    // Reset input
    e.target.value = "";
  };

  const removeFile = (index: number) => {
    setExamData((prev) => ({
      ...prev,
      materials: prev.materials.filter((_, i) => i !== index),
    }));
  };

  const getFileIcon = (fileName: string) => {
    const extension = fileName.split(".").pop()?.toLowerCase();
    switch (extension) {
      case "pdf":
        return "üìÑ";
      case "ppt":
      case "pptx":
        return "üìä";
      case "doc":
      case "docx":
        return "üìù";
      case "jpg":
      case "jpeg":
      case "png":
      case "gif":
      case "webp":
        return "üñºÔ∏è";
      default:
        return "üìé";
    }
  };

  const addQuestion = () => {
    const newQuestion: Question = {
      id: Date.now().toString(),
      text: "",
      type: "essay",
      core_ability: "", // Î¨∏Ï†ú ÌïµÏã¨ Ïó≠Îüâ Ï¥àÍ∏∞Ìôî
      isAutoGenerated: false, // Í∏∞Î≥∏Ï†ÅÏúºÎ°ú ÏßÅÏ†ëÏì∞Í∏∞ Î™®Îìú
    };
    setQuestions([...questions, newQuestion]);
  };

  const updateQuestion = (
    id: string,
    field: keyof Question,
    value: string | boolean
  ) => {
    setQuestions(
      questions.map((q) => (q.id === id ? { ...q, [field]: value } : q))
    );
  };

  const removeQuestion = (id: string) => {
    setQuestions(questions.filter((q) => q.id !== id));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!examData.title || !examData.code || questions.length === 0) return;

    setIsLoading(true);

    try {
      let materialUrls: string[] = [];

      // Upload files to Supabase Storage if any materials exist
      if (examData.materials.length > 0) {
        const uploadPromises = examData.materials.map(async (file) => {
          const fileName = `${Date.now()}-${file.name}`;
          const formData = new FormData();
          formData.append("file", file);
          formData.append("fileName", fileName);

          const uploadResponse = await fetch("/api/upload", {
            method: "POST",
            body: formData,
          });

          if (!uploadResponse.ok) {
            throw new Error(`Failed to upload ${file.name}`);
          }

          const uploadResult = await uploadResponse.json();
          return uploadResult.url;
        });

        materialUrls = await Promise.all(uploadPromises);
      }

      // Prepare exam data for database
      const examDataForDB = {
        title: examData.title,
        code: examData.code,
        description: examData.description,
        duration: examData.duration,
        instructions: examData.instructions,
        questions: questions,
        materials: materialUrls, // Array of file URLs
        status: "draft", // Start as draft
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      };

      // Save to Supabase
      const response = await fetch("/api/supa", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          action: "create_exam",
          data: examDataForDB,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error("API Error:", errorData);
        throw new Error(
          `Failed to create exam: ${errorData.error || "Unknown error"}`
        );
      }

      const result = await response.json();
      console.log("Exam created successfully:", result);

      // Redirect to exam management page
      router.push("/instructor/exams");
    } catch (error) {
      console.error("Error creating exam:", error);
      alert("ÏãúÌóò ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">ÏÉàÎ°úÏö¥ ÏãúÌóò ÎßåÎì§Í∏∞</h1>
            <p className="text-muted-foreground">
              Î¨∏Ï†úÏôÄ ÏÑ§Ï†ïÏúºÎ°ú ÏÉàÎ°úÏö¥ ÏãúÌóòÏùÑ Íµ¨ÏÑ±ÌïòÏÑ∏Ïöî
            </p>
          </div>
        </div>
      </div>

      <form
        onSubmit={handleSubmit}
        onKeyDown={(e) => {
          // textareaÏóêÏÑúÎäî ÏóîÌÑ∞ ÌóàÏö©, Îã§Î•∏ ÏûÖÎ†• ÏöîÏÜåÏóêÏÑúÎäî form submit Î∞©ÏßÄ
          if (
            e.key === "Enter" &&
            (e.target as HTMLElement).tagName !== "TEXTAREA"
          ) {
            e.preventDefault();
          }
        }}
        className="space-y-6"
      >
        {/* Basic Exam Info */}
        <Card>
          <CardHeader>
            <CardTitle>ÏãúÌóò Ï†ïÎ≥¥</CardTitle>
            <CardDescription>ÏãúÌóòÏùò Í∏∞Î≥∏ ÏÑ∏Î∂ÄÏÇ¨Ìï≠</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="title">ÏãúÌóò Ï†úÎ™©</Label>
                <Input
                  id="title"
                  value={examData.title}
                  onChange={(e) =>
                    setExamData((prev) => ({ ...prev, title: e.target.value }))
                  }
                  placeholder="Ïòà) Íµ≠Ï†úÍ≤ΩÏòÅÎ°† 25-1 Ï§ëÍ∞ÑÍ≥†ÏÇ¨"
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="code">ÏãúÌóò ÏΩîÎìú</Label>
                <div className="flex gap-2">
                  <Input
                    id="code"
                    value={examData.code}
                    onChange={(e) =>
                      setExamData((prev) => ({
                        ...prev,
                        code: e.target.value.toUpperCase(),
                      }))
                    }
                    placeholder={examData.code}
                    className="font-mono"
                    required
                    disabled
                  />
                  <Button
                    type="button"
                    variant="outline"
                    onClick={(e) => {
                      e.preventDefault();
                      generateExamCode();
                    }}
                  >
                    Ïû¨ÏÉùÏÑ±
                  </Button>
                </div>
              </div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="description">ÏãúÌóò Í¥ÄÎ†® ÏßÄÏπ®</Label>
              <Textarea
                id="description"
                value={examData.description}
                onChange={(e) =>
                  setExamData((prev) => ({
                    ...prev,
                    description: e.target.value,
                  }))
                }
                placeholder="ÏãúÌóòÏóê ÎåÄÌïú Í∞ÑÎã®Ìïú ÏÑ§Î™Ö"
                rows={6}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="duration">ÏãúÌóò ÏãúÍ∞Ñ (Î∂Ñ)</Label>
              <Input
                id="duration"
                type="number"
                value={examData.duration}
                onChange={(e) =>
                  setExamData((prev) => ({
                    ...prev,
                    duration: parseInt(e.target.value),
                  }))
                }
                min="15"
                max="480"
              />
            </div>
          </CardContent>
        </Card>

        {/* AI Configuration */}
        <Card>
          <CardHeader>
            <CardTitle>Ïù∏Í≥µÏßÄÎä• ÏÑ§Ï†ï</CardTitle>
            <CardDescription>
              AI ÎèÑÏö∞ÎØ∏Ïùò ÌñâÎèô Î∞©ÏãùÍ≥º ÌïôÏäµ ÏûêÎ£å ÏÑ§Ï†ï
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="instructions">Ïù∏Í≥µÏßÄÎä• ÏÑ§Ï†ï</Label>
              <Textarea
                id="instructions"
                value={examData.instructions}
                onChange={(e) =>
                  setExamData((prev) => ({
                    ...prev,
                    instructions: e.target.value,
                  }))
                }
                placeholder="Ïó¨Í∏∞Ïóê AI ÌîÑÎ°¨ÌîÑÌä∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                rows={8}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="materials">ÏàòÏóÖ ÏûêÎ£å</Label>
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <Input
                    id="materials"
                    type="file"
                    multiple
                    accept=".pdf,.ppt,.pptx,.doc,.docx,.jpg,.jpeg,.png,.gif,.webp"
                    onChange={handleFileSelect}
                    className="hidden"
                  />
                  <Label
                    htmlFor="materials"
                    className="flex items-center gap-2 px-4 py-2 border border-dashed border-gray-300 rounded-md cursor-pointer hover:border-gray-400 transition-colors"
                  >
                    üìé ÌååÏùº ÏÑ†ÌÉù
                  </Label>
                  <span className="text-sm text-muted-foreground">
                    PDF, PPT, ÏõåÎìú, Ïù¥ÎØ∏ÏßÄ ÌååÏùº (ÏµúÎåÄ 10MB)
                  </span>
                </div>

                {examData.materials.length > 0 && (
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">
                      ÏóÖÎ°úÎìúÎêú ÌååÏùº:
                    </Label>
                    <div className="space-y-1">
                      {examData.materials.map((file, index) => (
                        <div
                          key={index}
                          className="flex items-center justify-between p-2 bg-gray-50 rounded-md"
                        >
                          <div className="flex items-center gap-2">
                            <span className="text-lg">
                              {getFileIcon(file.name)}
                            </span>
                            <span className="text-sm font-medium">
                              {file.name}
                            </span>
                            <span className="text-xs text-muted-foreground">
                              ({(file.size / 1024 / 1024).toFixed(1)}MB)
                            </span>
                          </div>
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => removeFile(index)}
                          >
                            ‚úï
                          </Button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Questions */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>Î¨∏Ï†ú</CardTitle>
                <CardDescription>ÏãúÌóòÏóê Î¨∏Ï†úÎ•º Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî</CardDescription>
              </div>
              <Button
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  addQuestion();
                }}
              >
                Î¨∏Ï†ú Ï∂îÍ∞Ä
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            {questions.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                <p>ÏïÑÏßÅ Ï∂îÍ∞ÄÎêú Î¨∏Ï†úÍ∞Ä ÏóÜÏäµÎãàÎã§.</p>
                <p>&quot;Î¨∏Ï†ú Ï∂îÍ∞Ä&quot;Î•º ÌÅ¥Î¶≠ÌïòÏó¨ ÏãúÏûëÌïòÏÑ∏Ïöî!</p>
              </div>
            ) : (
              <div className="space-y-6">
                {questions.map((question, index) => (
                  <div key={question.id} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="font-semibold">Î¨∏Ï†ú {index + 1}</h3>
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={(e) => {
                          e.preventDefault();
                          removeQuestion(question.id);
                        }}
                      >
                        ÏÇ≠Ï†ú
                      </Button>
                    </div>
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <Label>Î¨∏Ï†ú Ïú†Ìòï</Label>
                        <select
                          value={question.type}
                          onChange={(e) =>
                            updateQuestion(question.id, "type", e.target.value)
                          }
                          className="w-full p-2 border rounded-md"
                        >
                          <option value="essay">Problem Solving Type</option>
                          <option value="short-answer" disabled>
                            Type B
                          </option>
                          <option value="multiple-choice" disabled>
                            Type C
                          </option>
                        </select>
                      </div>
                      <div className="space-y-2">
                        <div className="flex items-center justify-between">
                          <Label>ÏãúÌóò Î¨∏Ï†ú</Label>
                          <div className="flex items-center gap-2">
                            {question.isAutoGenerated && (
                              <Button
                                type="button"
                                variant="outline"
                                size="sm"
                                onClick={(e) => {
                                  e.preventDefault();
                                  generateQuestionWithAI(question.id);
                                }}
                                disabled={question.isGenerating}
                              >
                                {question.isGenerating
                                  ? "ÏÉùÏÑ± Ï§ë..."
                                  : "Ïû¨ÏÉùÏÑ±"}
                              </Button>
                            )}
                            <div className="flex items-center gap-2">
                              <Label
                                htmlFor={`auto-generate-${question.id}`}
                                className="text-sm"
                              >
                                ÏûêÎèôÏÉùÏÑ±
                              </Label>
                              <Switch
                                id={`auto-generate-${question.id}`}
                                checked={question.isAutoGenerated || false}
                                onCheckedChange={(checked) => {
                                  if (checked && !question.text) {
                                    // Ïä§ÏúÑÏπò ONÏù¥Í≥† ÎÇ¥Ïö©Ïù¥ ÎπÑÏñ¥ÏûàÏúºÎ©¥ AI ÏÉùÏÑ± Ïã§Ìñâ
                                    generateQuestionWithAI(question.id);
                                  } else {
                                    // Ïä§ÏúÑÏπò ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
                                    updateQuestion(
                                      question.id,
                                      "isAutoGenerated",
                                      checked
                                    );
                                  }
                                }}
                              />
                            </div>
                          </div>
                        </div>
                        {question.isGenerating && (
                          <div className="flex items-center justify-center p-4 bg-blue-50 border border-blue-200 rounded-md mb-2">
                            <div className="flex items-center gap-2 text-blue-600">
                              <div className="animate-spin rounded-full h-4 w-4 border-2 border-blue-600 border-t-transparent"></div>
                              <span className="text-sm font-medium">
                                AIÍ∞Ä Î¨∏Ï†úÎ•º ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§...
                              </span>
                            </div>
                          </div>
                        )}
                        <Textarea
                          value={question.text}
                          onChange={(e) =>
                            updateQuestion(question.id, "text", e.target.value)
                          }
                          placeholder={
                            question.isAutoGenerated
                              ? "AIÍ∞Ä ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±Ìïú Î¨∏Ï†úÏûÖÎãàÎã§. ÌïÑÏöîÏãú ÏàòÏ†ïÌïòÏÑ∏Ïöî."
                              : "Ïó¨Í∏∞Ïóê Î¨∏Ï†úÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                          }
                          rows={8}
                          className="min-h-[300px]"
                        />
                        {question.isAutoGenerated && (
                          <div className="space-y-2 mt-3">
                            <Label>AI Î™ÖÎ†πÏñ¥</Label>
                            <div className="flex gap-2">
                              <Input
                                value={question.aiCommand || ""}
                                onChange={(e) =>
                                  updateQuestion(
                                    question.id,
                                    "aiCommand",
                                    e.target.value
                                  )
                                }
                                placeholder="Ïòà: Ïù¥ Î¨∏Ï†úÎ•º Îçî Ïñ¥Î†µÍ≤å ÎßåÎì§Ïñ¥Ï§ò, ÎòêÎäî Îã§Î•∏ ÏòàÏãúÎ•º Îì§Ïñ¥ÏÑú ÏÑ§Î™ÖÌï¥Ï§ò"
                                className="flex-1"
                              />
                              <Button
                                type="button"
                                variant="outline"
                                size="sm"
                                onClick={(e) => {
                                  e.preventDefault();
                                  generateQuestionWithAI(question.id);
                                }}
                                disabled={
                                  question.isGenerating ||
                                  !question.aiCommand?.trim()
                                }
                              >
                                {question.isGenerating ? "ÏàòÏ†ï Ï§ë..." : "Ï†ÅÏö©"}
                              </Button>
                            </div>
                            <p className="text-xs text-muted-foreground">
                              AIÏóêÍ≤å Î¨∏Ï†ú ÏàòÏ†ïÏù¥ÎÇò Í∞úÏÑ†ÏùÑ ÏöîÏ≤≠Ìï† Ïàò ÏûàÏäµÎãàÎã§.
                            </p>
                          </div>
                        )}
                      </div>
                      <div className="space-y-2">
                        <Label>Î¨∏Ï†ú ÌïµÏã¨ Ïó≠Îüâ</Label>
                        <Textarea
                          value={question.core_ability}
                          onChange={(e) =>
                            updateQuestion(
                              question.id,
                              "core_ability",
                              e.target.value
                            )
                          }
                          placeholder="Ïó¨Í∏∞Ïóê Î¨∏Ï†ú ÌïµÏã¨ Ïó≠ÎüâÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                          rows={7}
                          className="min-h-[100px]"
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Submit */}
        <div className="flex gap-4">
          <Button
            type="button"
            variant="outline"
            onClick={() => router.push("/instructor")}
          >
            Ï∑®ÏÜå
          </Button>
          <Button
            type="submit"
            disabled={
              isLoading ||
              !examData.title ||
              !examData.code ||
              questions.length === 0
            }
          >
            {isLoading ? "ÎßåÎì§Í∏∞ Ï§ë..." : "ÏãúÌóò ÎßåÎì§Í∏∞"}
          </Button>
        </div>
      </form>
    </div>
  );
}
