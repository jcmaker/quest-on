"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { RichTextEditor } from "@/components/ui/rich-text-editor";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { useRouter } from "next/navigation";
import { Sparkles, Plus, Trash2 } from "lucide-react";
import { toast } from "sonner";
import { useUser } from "@clerk/nextjs";
import { Separator } from "@/components/ui/separator";

export default function CreateExam() {
  const router = useRouter();
  const { user } = useUser();
  const [isLoading, setIsLoading] = useState(false);
  const [examData, setExamData] = useState({
    title: "",
    description: "",
    duration: 60,
    code: "",
    materials: [] as File[],
  });
  const [disabledFiles, setDisabledFiles] = useState<Set<number>>(new Set());
  const [canAddMoreFiles, setCanAddMoreFiles] = useState(true);
  const [isDragOver, setIsDragOver] = useState(false);
  const [questions, setQuestions] = useState<Question[]>([]);
  const [rubric, setRubric] = useState<RubricItem[]>([
    {
      id: Date.now().toString(),
      evaluationArea: "",
      detailedCriteria: "",
      weight: 100,
    },
  ]);

  interface Question {
    id: string;
    text: string;
    type: "multiple-choice" | "essay" | "short-answer";
    options?: string[];
    correctAnswer?: string;
    core_ability?: string; // 문제 핵심 역량 - AI 프롬프트에 사용
    isAutoGenerated?: boolean; // 자동 생성 여부
    isGenerating?: boolean; // AI 생성 중 상태
    aiCommand?: string; // AI에게 내릴 명령어
  }

  interface RubricItem {
    id: string;
    evaluationArea: string; // 평가 영역
    detailedCriteria: string; // 세부 능력
    weight: number; // 중요도 비율 (0-100)
  }

  const generateExamCode = () => {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    let result = "";
    for (let i = 0; i < 6; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    setExamData((prev) => ({ ...prev, code: result }));
  };

  // 파일 용량 계산 함수
  const calculateTotalSize = (files: File[]) => {
    return files.reduce((total, file) => total + file.size, 0);
  };

  // 파일 용량 검증 및 비활성화 처리
  const validateAndManageFileSize = (files: File[]) => {
    const MAX_SIZE = 50 * 1024 * 1024; // 50MB
    const totalSize = calculateTotalSize(files);

    if (totalSize <= MAX_SIZE) {
      // 용량이 정상인 경우
      setDisabledFiles(new Set());
      setCanAddMoreFiles(true);
      return true;
    }

    // 용량 초과 시 처리
    setCanAddMoreFiles(false);
    toast.error("파일 용량이 50MB를 초과했습니다. 일부 파일이 비활성화됩니다.");

    // 뒤에서부터 파일을 하나씩 비활성화하여 50MB 이하로 만들기
    const newDisabledFiles = new Set<number>();
    let currentSize = 0;

    for (let i = files.length - 1; i >= 0; i--) {
      currentSize += files[i].size;
      if (currentSize > MAX_SIZE) {
        newDisabledFiles.add(i);
        currentSize -= files[i].size; // 이 파일은 제외
      }
    }

    setDisabledFiles(newDisabledFiles);
    return false;
  };

  const generateQuestionWithAI = async (questionId: string) => {
    if (!examData.title) {
      alert("시험 제목을 먼저 입력해주세요.");
      return;
    }

    const currentQuestion = questions.find((q) => q.id === questionId);
    if (!currentQuestion) return;

    // 해당 문제의 로딩 상태 설정
    setQuestions(
      questions.map((q) =>
        q.id === questionId ? { ...q, isGenerating: true } : q
      )
    );

    try {
      let prompt;

      if (currentQuestion.aiCommand && currentQuestion.aiCommand.trim()) {
        // AI 명령어가 있는 경우 - 기존 문제를 수정
        prompt = `당신은 전문 시험 출제자입니다. 다음 정보를 바탕으로 기존 문제를 수정해주세요.

시험 정보:
- 제목: ${examData.title}
${examData.description ? `- 설명: ${examData.description}` : ""}
- 시간: ${examData.duration}분

기존 문제:
${currentQuestion.text}

수정 요청: ${currentQuestion.aiCommand}

${
  rubric.length > 0
    ? `\n평가 루브릭:
${rubric
  .map(
    (item) =>
      `- ${item.evaluationArea}: ${item.detailedCriteria} (비중: ${item.weight}%)`
  )
  .join("\n")}
\n위 루브릭의 평가 기준에 맞는 문제를 만들어야 합니다.`
    : ""
}

${
  examData.materials.length > 0
    ? `\n\n수업 자료 파일:
${examData.materials
  .map((file, index) => `${index + 1}. ${file.name}`)
  .join("\n")}
\n위 수업 자료 파일을 참고하여 문제를 만들어야 합니다.`
    : ""
}

요구사항:
1. 기존 문제를 바탕으로 사용자의 요청사항을 반영하여 수정하세요.
2. 문제의 교육적 가치를 유지하면서 요청사항을 충족시키세요.
3. 정답을 직접 제공하지 말고, 학생이 사고력을 발휘할 수 있도록 하세요.
4. 수정된 문제의 핵심 역량을 함께 제안해주세요.
${
  rubric.length > 0
    ? "5. 평가 루브릭의 기준을 반영하여 평가가 가능한 문제를 만들어주세요."
    : ""
}
${
  examData.materials.length > 0
    ? "6. 수업 자료의 내용을 충실히 반영하여 실질적인 학습 내용을 다루어주세요."
    : ""
}

응답 형식:
문제: [수정된 문제 내용]

핵심 역량: [문제의 핵심 역량 설명]`;
      } else {
        // AI 명령어가 없는 경우 - 새 문제 생성
        prompt = `당신은 전문 시험 출제자입니다. 다음 정보를 바탕으로 적절한 시험 문제를 1개 생성해주세요.

시험 정보:
- 제목: ${examData.title}
${examData.description ? `- 설명: ${examData.description}` : ""}
- 시간: ${examData.duration}분

${
  rubric.length > 0
    ? `\n평가 루브릭:
${rubric
  .map(
    (item) =>
      `- ${item.evaluationArea}: ${item.detailedCriteria} (비중: ${item.weight}%)`
  )
  .join("\n")}
\n위 루브릭의 평가 기준에 맞는 문제를 만들어야 합니다.`
    : ""
}

${
  examData.materials.length > 0
    ? `\n\n수업 자료 파일:
${examData.materials
  .map((file, index) => `${index + 1}. ${file.name}`)
  .join("\n")}
\n위 수업 자료 파일을 참고하여 문제를 만들어야 합니다.`
    : ""
}

요구사항:
1. 시험의 난이도와 내용에 맞는 적절한 문제를 생성하세요.
2. 문제는 명확하고 교육적으로 의미 있어야 합니다.
3. 정답을 직접 제공하지 말고, 학생이 사고력을 발휘할 수 있도록 하세요.
4. 문제의 핵심 역량을 함께 제안해주세요.
${
  rubric.length > 0
    ? "5. 평가 루브릭의 기준을 반영하여 평가가 가능한 문제를 만들어주세요."
    : ""
}
${
  examData.materials.length > 0
    ? "6. 수업 자료의 내용을 충실히 반영하여 실질적인 학습 내용을 다루어주세요."
    : ""
}

응답 형식:
문제: [생성된 문제 내용]

핵심 역량: [문제의 핵심 역량 설명]`;
      }

      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          message: prompt,
          sessionId: "temp_generate_question",
          examTitle: examData.title,
          examCode: examData.code,
        }),
      });

      if (!response.ok) {
        throw new Error("AI 문제 생성에 실패했습니다.");
      }

      const data = await response.json();
      const aiResponse = data.response;

      // AI 응답에서 문제와 핵심 역량을 파싱
      const problemMatch = aiResponse.match(/문제:\s*(.+?)(?:\n|$)/);
      const coreAbilityMatch = aiResponse.match(/핵심 역량:\s*(.+?)(?:\n|$)/);

      const problemText = problemMatch ? problemMatch[1].trim() : aiResponse;
      const coreAbilityText = coreAbilityMatch
        ? coreAbilityMatch[1].trim()
        : "문제 해결 능력";

      // 해당 문제 업데이트
      setQuestions(
        questions.map((q) =>
          q.id === questionId
            ? {
                ...q,
                text: problemText,
                core_ability: coreAbilityText,
                isAutoGenerated: true,
                isGenerating: false,
                aiCommand:
                  currentQuestion.aiCommand && currentQuestion.aiCommand.trim()
                    ? "" // 명령어 사용 후 초기화
                    : q.aiCommand,
              }
            : q
        )
      );
    } catch (error) {
      console.error("AI 문제 생성 오류:", error);
      alert("문제 생성 중 오류가 발생했습니다. 다시 시도해주세요.");

      // 에러 발생 시 로딩 상태 해제
      setQuestions(
        questions.map((q) =>
          q.id === questionId ? { ...q, isGenerating: false } : q
        )
      );
    }
  };

  // 페이지 진입 시 자동으로 시험 코드 생성
  useEffect(() => {
    generateExamCode();
  }, []);

  const validateFile = (file: File): boolean => {
    const allowedTypes = [
      "application/pdf",
      "application/vnd.ms-powerpoint",
      "application/vnd.openxmlformats-officedocument.presentationml.presentation",
      "application/msword",
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
      "image/jpeg",
      "image/png",
      "image/gif",
      "image/webp",
    ];

    const maxSize = 50 * 1024 * 1024; // 50MB (will be compressed)

    if (!allowedTypes.includes(file.type)) {
      alert(
        "지원되지 않는 파일 형식입니다. PDF, PPT, 워드, 이미지 파일만 업로드 가능합니다."
      );
      return false;
    }

    if (file.size > maxSize) {
      alert("파일 크기가 50MB를 초과합니다.");
      return false;
    }

    return true;
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!canAddMoreFiles) {
      toast.error("파일 용량이 초과되어 더 이상 파일을 추가할 수 없습니다.");
      e.target.value = "";
      return;
    }

    const files = Array.from(e.target.files || []);
    const validFiles = files.filter(validateFile);

    if (validFiles.length === 0) {
      e.target.value = "";
      return;
    }

    const newMaterials = [...examData.materials, ...validFiles];

    // 용량 검증 및 관리
    validateAndManageFileSize(newMaterials);

    setExamData((prev) => ({
      ...prev,
      materials: newMaterials,
    }));

    // Reset input
    e.target.value = "";
  };

  // 드래그 앤 드롭 핸들러들
  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (canAddMoreFiles) {
      setIsDragOver(true);
    }
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragOver(false);

    if (!canAddMoreFiles) {
      toast.error("파일 용량이 초과되어 더 이상 파일을 추가할 수 없습니다.");
      return;
    }

    const files = Array.from(e.dataTransfer.files);
    const validFiles = files.filter(validateFile);

    if (validFiles.length === 0) {
      return;
    }

    const newMaterials = [...examData.materials, ...validFiles];

    // 용량 검증 및 관리
    validateAndManageFileSize(newMaterials);

    setExamData((prev) => ({
      ...prev,
      materials: newMaterials,
    }));
  };

  const handleDragAreaClick = () => {
    if (canAddMoreFiles) {
      document.getElementById("materials")?.click();
    }
  };

  const removeFile = (index: number) => {
    const newMaterials = examData.materials.filter((_, i) => i !== index);

    // 파일 삭제 후 용량 재검증
    validateAndManageFileSize(newMaterials);

    setExamData((prev) => ({
      ...prev,
      materials: newMaterials,
    }));
  };

  const getFileIcon = (fileName: string) => {
    const extension = fileName.split(".").pop()?.toLowerCase();
    switch (extension) {
      case "pdf":
        return "📄";
      case "ppt":
      case "pptx":
        return "📊";
      case "doc":
      case "docx":
        return "📝";
      case "jpg":
      case "jpeg":
      case "png":
      case "gif":
      case "webp":
        return "🖼️";
      default:
        return "📎";
    }
  };

  const addQuestion = () => {
    const newQuestion: Question = {
      id: Date.now().toString(),
      text: "",
      type: "essay",
      core_ability: "", // 문제 핵심 역량 초기화
      isAutoGenerated: false, // 기본적으로 직접쓰기 모드
    };
    setQuestions([...questions, newQuestion]);
  };

  const updateQuestion = (
    id: string,
    field: keyof Question,
    value: string | boolean
  ) => {
    setQuestions(
      questions.map((q) => (q.id === id ? { ...q, [field]: value } : q))
    );
  };

  const removeQuestion = (id: string) => {
    setQuestions(questions.filter((q) => q.id !== id));
  };

  const addRubricItem = () => {
    // 기존 항목들의 weight를 균등하게 재분배 (5단위로)
    const totalItems = rubric.length + 1;
    const equalWeight = Math.floor(100 / totalItems / 5) * 5;
    const remainder = 100 - equalWeight * totalItems;

    const updatedRubric = rubric.map((item, index) => ({
      ...item,
      weight: equalWeight + (index < remainder ? 5 : 0),
    }));

    const newRubricItem: RubricItem = {
      id: Date.now().toString(),
      evaluationArea: "",
      detailedCriteria: "",
      weight: equalWeight + (rubric.length < remainder ? 5 : 0),
    };

    setRubric([...updatedRubric, newRubricItem]);
  };

  const updateRubricItem = (
    id: string,
    field: keyof RubricItem,
    value: string | number
  ) => {
    let updatedRubric = rubric.map((item) =>
      item.id === id ? { ...item, [field]: value } : item
    );

    // weight 필드가 변경된 경우 비율을 100%로 조정
    if (field === "weight") {
      const totalWeight = updatedRubric.reduce(
        (sum, item) => sum + item.weight,
        0
      );

      if (totalWeight !== 100) {
        // 비례적으로 조정 (5단위로)
        updatedRubric = updatedRubric.map((item) => ({
          ...item,
          weight: Math.round(((item.weight / totalWeight) * 100) / 5) * 5,
        }));

        // 정확히 100%가 되도록 조정 (5단위로)
        const newTotal = updatedRubric.reduce(
          (sum, item) => sum + item.weight,
          0
        );
        const difference = 100 - newTotal;

        if (difference !== 0) {
          // 5단위로 조정
          const adjustment = Math.round(difference / 5) * 5;
          updatedRubric[0].weight += adjustment;
        }
      }
    }

    setRubric(updatedRubric);
  };

  const removeRubricItem = (id: string) => {
    const newRubric = rubric.filter((item) => item.id !== id);

    // 항목이 남아있으면 비율을 재분배 (5단위로)
    if (newRubric.length > 0) {
      const totalItems = newRubric.length;
      const equalWeight = Math.floor(100 / totalItems / 5) * 5;
      const remainder = 100 - equalWeight * totalItems;

      const updatedRubric = newRubric.map((item, index) => ({
        ...item,
        weight: equalWeight + (index < remainder ? 5 : 0),
      }));

      setRubric(updatedRubric);
    } else {
      setRubric([]);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // 비활성화된 버튼 클릭 시 이유 안내
    if (!examData.title) {
      toast.error("시험 제목을 입력해주세요.");
      return;
    }
    if (!examData.code) {
      toast.error("시험 코드를 생성해주세요.");
      return;
    }
    if (questions.length === 0) {
      toast.error("최소 1개 이상의 문제를 추가해주세요.");
      return;
    }
    if (!canAddMoreFiles) {
      toast.error("파일 용량이 50MB를 초과했습니다. 일부 파일을 삭제해주세요.");
      return;
    }

    if (!examData.title || !examData.code || questions.length === 0) return;

    setIsLoading(true);

    try {
      let materialUrls: string[] = [];

      // Upload files to Supabase Storage if any materials exist
      // 비활성화된 파일들을 제외하고 업로드
      const activeMaterials = examData.materials.filter(
        (_, index) => !disabledFiles.has(index)
      );

      if (activeMaterials.length > 0) {
        const uploadPromises = activeMaterials.map(async (file) => {
          // 원본 파일명은 파일 자체의 name 속성으로 서버에 전달됨
          console.log(`[client] Processing file: ${file.name}`, {
            originalName: file.name,
            fileSize: file.size,
            fileType: file.type,
          });

          try {
            // RLS 정책 문제 해결을 위한 Signed URL 방식
            const { createClient } = await import("@supabase/supabase-js");

            const supabase = createClient(
              process.env.NEXT_PUBLIC_SUPABASE_URL!,
              process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
            );

            // 안전한 파일명 생성
            const timestamp = new Date().toISOString().slice(0, 10);
            const randomId = crypto.randomUUID();
            const fileExtension =
              file.name.match(/\.([a-zA-Z0-9]{1,8})$/)?.[1]?.toLowerCase() ||
              "bin";
            const safeFileName = `${timestamp}_${randomId}.${fileExtension}`;

            // Storage 경로: instructor-{userId}/{safeFileName}
            const storagePath = `instructor-${user?.id}/${safeFileName}`;

            console.log(`[client] Attempting direct upload to Supabase:`, {
              originalName: file.name,
              storagePath: storagePath,
              fileSize: file.size,
              fileType: file.type,
            });

            // 먼저 직접 업로드 시도
            const { data, error } = await supabase.storage
              .from("exam-materials")
              .upload(storagePath, file, {
                contentType: file.type,
                upsert: true,
              });

            if (error) {
              console.error(
                `[client] Direct upload failed for ${file.name}:`,
                error
              );

              // RLS 정책 에러인 경우 서버 API로 폴백
              if (
                error.message.includes("row-level security") ||
                error.message.includes("policy")
              ) {
                console.log(
                  `[client] RLS policy error detected, falling back to server API for ${file.name}`
                );

                // 서버 API로 폴백 (4MB 제한 있지만 작은 파일은 가능)
                const formData = new FormData();
                formData.append("file", file);

                const uploadResponse = await fetch("/api/upload", {
                  method: "POST",
                  body: formData,
                });

                if (!uploadResponse.ok) {
                  if (uploadResponse.status === 413) {
                    throw new Error(
                      `${file.name}: 파일이 너무 큽니다 (${(
                        file.size /
                        1024 /
                        1024
                      ).toFixed(1)}MB). RLS 정책 수정이 필요합니다.`
                    );
                  }
                  throw new Error(
                    `${file.name}: 서버 업로드 실패 (${uploadResponse.status})`
                  );
                }

                const result = await uploadResponse.json();
                if (!result.ok) {
                  throw new Error(`${file.name}: ${result.message}`);
                }

                console.log(
                  `[client] Server upload successful for ${file.name}`
                );
                return result.url;
              }

              throw new Error(`${file.name}: 업로드 실패 - ${error.message}`);
            }

            // 직접 업로드 성공
            const { data: urlData } = supabase.storage
              .from("exam-materials")
              .getPublicUrl(data.path);

            console.log(`[client] Direct upload successful for ${file.name}:`, {
              originalName: file.name,
              storagePath: data.path,
              publicUrl: urlData.publicUrl,
              fileSize: file.size,
              fileType: file.type,
            });

            return urlData.publicUrl;
          } catch (error) {
            console.error(
              `[client] Direct upload error for ${file.name}:`,
              error
            );
            throw error;
          }
        });

        try {
          console.log(
            `[client] Starting upload of ${activeMaterials.length} files...`
          );
          materialUrls = await Promise.all(uploadPromises);
          console.log(
            `[client] Successfully uploaded ${materialUrls.length} files`
          );
        } catch (uploadError) {
          console.error("[client] File upload failed:", uploadError);

          // 에러 메시지 추출 및 표시
          const errorMessage =
            uploadError instanceof Error
              ? uploadError.message
              : "파일 업로드 중 오류가 발생했습니다.";

          toast.error(errorMessage);
          throw uploadError; // Re-throw to prevent exam creation
        }
      }

      // Prepare exam data for database
      const examDataForDB = {
        title: examData.title,
        code: examData.code,
        description: examData.description,
        duration: examData.duration,
        questions: questions,
        rubric: rubric, // 루브릭 데이터 추가
        materials: materialUrls, // Array of file URLs
        status: "draft", // Start as draft
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      };

      // Save to Supabase
      const response = await fetch("/api/supa", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          action: "create_exam",
          data: examDataForDB,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error("API Error:", errorData);
        throw new Error(
          `Failed to create exam: ${errorData.error || "Unknown error"}`
        );
      }

      const result = await response.json();
      console.log("Exam created successfully:", result);

      // Redirect to exam management page
      router.push("/instructor/exams");
    } catch (error) {
      console.error("Error creating exam:", error);
      alert("시험 생성 중 오류가 발생했습니다. 다시 시도해주세요.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">새로운 시험 만들기</h1>
            <p className="text-muted-foreground">
              문제와 설정으로 새로운 시험을 구성하세요
            </p>
          </div>
        </div>
      </div>

      <form
        onSubmit={handleSubmit}
        onKeyDown={(e) => {
          // textarea에서는 엔터 허용, 다른 입력 요소에서는 form submit 방지
          if (
            e.key === "Enter" &&
            (e.target as HTMLElement).tagName !== "TEXTAREA"
          ) {
            e.preventDefault();
          }
        }}
        className="space-y-6"
      >
        {/* Basic Exam Info */}
        <Card>
          <CardHeader>
            <CardTitle>시험 정보</CardTitle>
            <CardDescription>시험의 기본 세부사항</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="title">시험 제목</Label>
                <Input
                  id="title"
                  value={examData.title}
                  onChange={(e) =>
                    setExamData((prev) => ({ ...prev, title: e.target.value }))
                  }
                  placeholder="예) 국제경영론 25-1 중간고사"
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="code">시험 코드</Label>
                <div className="flex gap-2">
                  <Input
                    id="code"
                    value={examData.code}
                    onChange={(e) =>
                      setExamData((prev) => ({
                        ...prev,
                        code: e.target.value.toUpperCase(),
                      }))
                    }
                    placeholder={examData.code}
                    className="font-mono"
                    required
                    disabled
                  />
                  <Button
                    type="button"
                    variant="outline"
                    onClick={(e) => {
                      e.preventDefault();
                      generateExamCode();
                    }}
                  >
                    재생성
                  </Button>
                </div>
              </div>
            </div>

            <Separator />

            <div className="space-y-2">
              <Label htmlFor="materials">수업 자료</Label>
              <div className="space-y-2">
                <div className="">
                  <Input
                    id="materials"
                    type="file"
                    multiple
                    accept=".pdf,.ppt,.pptx,.doc,.docx,.jpg,.jpeg,.png,.gif,.webp"
                    onChange={handleFileSelect}
                    className="hidden"
                    disabled={!canAddMoreFiles}
                  />
                  {/* <Label
                    htmlFor="materials"
                    className={`flex items-center gap-2 px-4 py-2 border border-dashed rounded-md transition-colors ${
                      canAddMoreFiles
                        ? "border-gray-300 cursor-pointer hover:border-gray-400"
                        : "border-gray-200 cursor-not-allowed bg-gray-50 text-gray-400"
                    }`}
                  >
                    📎 파일 선택
                  </Label> */}
                  <div
                    className={`text-center py-8 text-muted-foreground border-2 border-dashed rounded-lg transition-all duration-200 ${
                      isDragOver
                        ? "border-blue-400 bg-blue-50 text-blue-600"
                        : canAddMoreFiles
                        ? "border-gray-300 cursor-pointer hover:border-gray-400 hover:bg-gray-50"
                        : "border-gray-200 cursor-not-allowed bg-gray-50 text-gray-400"
                    }`}
                    onDragOver={handleDragOver}
                    onDragLeave={handleDragLeave}
                    onDrop={handleDrop}
                    onClick={handleDragAreaClick}
                  >
                    <div className="flex flex-col items-center gap-2">
                      <div className="text-2xl">{isDragOver ? "📁" : "📎"}</div>
                      <div className="text-sm font-medium">
                        {isDragOver
                          ? "파일을 여기에 놓으세요"
                          : "파일을 드래그하거나 클릭하여 선택"}
                      </div>
                      <div className="text-xs">PDF, PPT, 워드, 이미지 파일</div>
                    </div>
                  </div>
                </div>
                <span className="text-sm text-muted-foreground">
                  PDF, PPT, 워드, 이미지 파일 (최대 50MB, 자동 압축)
                  {!canAddMoreFiles && " - 용량 초과로 추가 불가"}
                </span>

                {examData.materials.length > 0 && (
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <Label className="text-sm font-medium">
                        업로드된 파일:
                      </Label>
                      <span className="text-xs text-muted-foreground">
                        총 용량:{" "}
                        {(
                          calculateTotalSize(examData.materials) /
                          1024 /
                          1024
                        ).toFixed(1)}
                        MB / 50MB
                      </span>
                    </div>
                    <div className="space-y-1">
                      {examData.materials.map((file, index) => {
                        const isDisabled = disabledFiles.has(index);
                        return (
                          <div
                            key={index}
                            className={`flex items-center justify-between p-2 rounded-md ${
                              isDisabled
                                ? "bg-red-50 border border-red-200"
                                : "bg-gray-50"
                            }`}
                          >
                            <div className="flex items-center gap-2">
                              <span className="text-lg">
                                {getFileIcon(file.name)}
                              </span>
                              <span
                                className={`text-sm font-medium ${
                                  isDisabled ? "text-red-600" : ""
                                }`}
                              >
                                {file.name}
                              </span>
                              <span className="text-xs text-muted-foreground">
                                ({(file.size / 1024 / 1024).toFixed(1)}MB)
                              </span>
                              {isDisabled && (
                                <span className="text-xs text-red-500 font-medium">
                                  (용량 초과로 비활성화)
                                </span>
                              )}
                            </div>
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => removeFile(index)}
                            >
                              ✕
                            </Button>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                )}
              </div>
            </div>

            <Separator />

            {/* Rubric */}
            <div className="space-y-4">
              <div>
                <Label htmlFor="rubric">평가 루브릭</Label>
                <p className="text-sm text-muted-foreground">
                  AI 답변과 시험 평가에 사용될 평가 기준을 설정하세요
                </p>
              </div>

              {rubric.length === 0 ? (
                <div className="text-center py-12 text-muted-foreground border-2 border-dashed border-gray-300 rounded-lg bg-gray-50/50">
                  <div className="flex flex-col items-center gap-3">
                    <div className="text-2xl">📋</div>
                    <div>
                      <p className="font-medium text-gray-700">
                        아직 추가된 루브릭이 없습니다
                      </p>
                      <p className="text-sm">
                        아래 + 버튼을 클릭하여 평가 기준을 설정하세요!
                      </p>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="border rounded-lg overflow-hidden">
                  <Table>
                    <TableHeader className="bg-gray-50">
                      <TableRow>
                        <TableHead className="w-[200px] font-semibold text-gray-700">
                          평가 영역
                        </TableHead>
                        <TableHead className="font-semibold text-gray-700">
                          세부 사항
                        </TableHead>
                        <TableHead className="w-[120px] text-center font-semibold text-gray-700">
                          중요도 비율
                        </TableHead>
                        <TableHead className="w-[80px] text-center font-semibold text-gray-700">
                          작업
                        </TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {rubric.map((item) => (
                        <TableRow
                          key={item.id}
                          className="align-top hover:bg-gray-50/50"
                        >
                          <TableCell className="py-4">
                            <Input
                              value={item.evaluationArea}
                              onChange={(e) =>
                                updateRubricItem(
                                  item.id,
                                  "evaluationArea",
                                  e.target.value
                                )
                              }
                              placeholder="예: 문제 해결 능력, 창의적 사고 등"
                              className="w-full h-16 border-gray-200 focus:border-blue-500 focus:ring-blue-500"
                            />
                          </TableCell>
                          <TableCell className="py-4">
                            <Textarea
                              value={item.detailedCriteria}
                              onChange={(e) =>
                                updateRubricItem(
                                  item.id,
                                  "detailedCriteria",
                                  e.target.value
                                )
                              }
                              placeholder="예: 문제를 정확히 파악하고, 체계적인 해결 방법을 제시하며, 논리적으로 설명할 수 있는가?"
                              rows={3}
                              className="w-full h-16 resize-none border-gray-200 focus:border-blue-500 focus:ring-blue-500"
                            />
                          </TableCell>
                          <TableCell className="py-4">
                            <div className="space-y-2">
                              <div className="flex items-center gap-2">
                                <input
                                  type="range"
                                  min="0"
                                  max="100"
                                  step="5"
                                  value={item.weight}
                                  onChange={(e) =>
                                    updateRubricItem(
                                      item.id,
                                      "weight",
                                      parseInt(e.target.value)
                                    )
                                  }
                                  className="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                                />
                                <span className="text-sm font-medium min-w-[40px] text-center">
                                  {item.weight}%
                                </span>
                              </div>
                              <div className="text-xs text-gray-500 text-center">
                                비율이 자동으로 조정됩니다
                              </div>
                            </div>
                          </TableCell>
                          <TableCell className="py-4 text-center">
                            <Button
                              type="button"
                              variant="ghost"
                              size="icon"
                              onClick={(e) => {
                                e.preventDefault();
                                removeRubricItem(item.id);
                              }}
                              className="text-red-500 hover:text-red-700 hover:bg-red-50 h-8 w-8"
                            >
                              <Trash2 className="w-4 h-4" />
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              )}

              <div className="flex justify-center pt-4">
                <Button
                  type="button"
                  onClick={(e) => {
                    e.preventDefault();
                    addRubricItem();
                  }}
                  className="flex items-center gap-2 px-4 py-2"
                  variant="outline"
                >
                  <Plus className="w-4 h-4" />
                  평가 기준 추가
                </Button>
              </div>
            </div>

            <Separator />

            <div className="space-y-2">
              <Label htmlFor="duration">시험 시간</Label>
              <div className="space-y-3">
                <div className="flex items-center gap-4">
                  <span className="text-sm text-gray-600 min-w-[60px]">
                    {examData.duration}분
                  </span>
                  <input
                    type="range"
                    min="15"
                    max="480"
                    step="15"
                    value={examData.duration}
                    onChange={(e) =>
                      setExamData((prev) => ({
                        ...prev,
                        duration: parseInt(e.target.value),
                      }))
                    }
                    className="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                  />
                </div>
                <div className="flex gap-2 flex-wrap">
                  {[30, 60, 90, 120, 180, 240].map((time) => (
                    <Button
                      key={time}
                      type="button"
                      variant={
                        examData.duration === time ? "default" : "outline"
                      }
                      size="sm"
                      onClick={() =>
                        setExamData((prev) => ({ ...prev, duration: time }))
                      }
                      className="text-xs"
                    >
                      {time}분
                    </Button>
                  ))}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* AI Configuration */}
        {/* <Card>
          <CardHeader>
            <CardTitle>인공지능 설정</CardTitle>
            <CardDescription>
              AI 도우미의 행동 방식과 학습 자료 설정
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="instructions">인공지능 설정</Label>
              <Textarea
                id="instructions"
                value={examData.instructions}
                onChange={(e) =>
                  setExamData((prev) => ({
                    ...prev,
                    instructions: e.target.value,
                  }))
                }
                placeholder="여기에 AI 프롬프트를 입력하세요..."
                rows={8}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="materials">수업 자료</Label>
              <div className="space-y-2">
                <div className="">
                  <Input
                    id="materials"
                    type="file"
                    multiple
                    accept=".pdf,.ppt,.pptx,.doc,.docx,.jpg,.jpeg,.png,.gif,.webp"
                    onChange={handleFileSelect}
                    className="hidden"
                    disabled={!canAddMoreFiles}
                  />
                  <div
                    className={`text-center py-8 text-muted-foreground border-2 border-dashed rounded-lg transition-all duration-200 ${
                      isDragOver
                        ? "border-blue-400 bg-blue-50 text-blue-600"
                        : canAddMoreFiles
                        ? "border-gray-300 cursor-pointer hover:border-gray-400 hover:bg-gray-50"
                        : "border-gray-200 cursor-not-allowed bg-gray-50 text-gray-400"
                    }`}
                    onDragOver={handleDragOver}
                    onDragLeave={handleDragLeave}
                    onDrop={handleDrop}
                    onClick={handleDragAreaClick}
                  >
                    <div className="flex flex-col items-center gap-2">
                      <div className="text-2xl">{isDragOver ? "📁" : "📎"}</div>
                      <div className="text-sm font-medium">
                        {isDragOver
                          ? "파일을 여기에 놓으세요"
                          : "파일을 드래그하거나 클릭하여 선택"}
                      </div>
                      <div className="text-xs">PDF, PPT, 워드, 이미지 파일</div>
                    </div>
                  </div>
                </div>
                <span className="text-sm text-muted-foreground">
                  PDF, PPT, 워드, 이미지 파일 (최대 50MB, 자동 압축)
                  {!canAddMoreFiles && " - 용량 초과로 추가 불가"}
                </span>

                {examData.materials.length > 0 && (
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <Label className="text-sm font-medium">
                        업로드된 파일:
                      </Label>
                      <span className="text-xs text-muted-foreground">
                        총 용량:{" "}
                        {(
                          calculateTotalSize(examData.materials) /
                          1024 /
                          1024
                        ).toFixed(1)}
                        MB / 50MB
                      </span>
                    </div>
                    <div className="space-y-1">
                      {examData.materials.map((file, index) => {
                        const isDisabled = disabledFiles.has(index);
                        return (
                          <div
                            key={index}
                            className={`flex items-center justify-between p-2 rounded-md ${
                              isDisabled
                                ? "bg-red-50 border border-red-200"
                                : "bg-gray-50"
                            }`}
                          >
                            <div className="flex items-center gap-2">
                              <span className="text-lg">
                                {getFileIcon(file.name)}
                              </span>
                              <span
                                className={`text-sm font-medium ${
                                  isDisabled ? "text-red-600" : ""
                                }`}
                              >
                                {file.name}
                              </span>
                              <span className="text-xs text-muted-foreground">
                                ({(file.size / 1024 / 1024).toFixed(1)}MB)
                              </span>
                              {isDisabled && (
                                <span className="text-xs text-red-500 font-medium">
                                  (용량 초과로 비활성화)
                                </span>
                              )}
                            </div>
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => removeFile(index)}
                            >
                              ✕
                            </Button>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Questions */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>문제</CardTitle>
                <CardDescription>시험에 문제를 추가하세요</CardDescription>
              </div>
              <Button
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  addQuestion();
                }}
              >
                문제 추가
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            {questions.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                <p>아직 추가된 문제가 없습니다.</p>
                <p>&quot;문제 추가&quot;를 클릭하여 시작하세요!</p>
              </div>
            ) : (
              <div className="space-y-6">
                {questions.map((question, index) => (
                  <div key={question.id} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="font-semibold">문제 {index + 1}</h3>
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={(e) => {
                          e.preventDefault();
                          removeQuestion(question.id);
                        }}
                      >
                        삭제
                      </Button>
                    </div>
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <Label>문제 유형</Label>
                        <select
                          value={question.type}
                          onChange={(e) =>
                            updateQuestion(question.id, "type", e.target.value)
                          }
                          className="w-full p-2 border rounded-md"
                        >
                          <option value="essay">Problem Solving Type</option>
                          <option value="short-answer" disabled>
                            Type B
                          </option>
                          <option value="multiple-choice" disabled>
                            Type C
                          </option>
                        </select>
                      </div>
                      <div className="space-y-2">
                        <div className="flex items-center justify-between">
                          <Label>시험 문제</Label>
                          <div className="flex items-center gap-2">
                            {question.isAutoGenerated && (
                              <Button
                                type="button"
                                variant="outline"
                                size="sm"
                                onClick={(e) => {
                                  e.preventDefault();
                                  generateQuestionWithAI(question.id);
                                }}
                                disabled={question.isGenerating}
                              >
                                {question.isGenerating
                                  ? "생성 중..."
                                  : "재생성"}
                              </Button>
                            )}
                            <div className="flex items-center gap-2">
                              <Label
                                htmlFor={`auto-generate-${question.id}`}
                                className="text-sm"
                              >
                                <Sparkles className="w-4 h-4 text-primary" />
                                AI 스마트 생성
                              </Label>
                              <Switch
                                id={`auto-generate-${question.id}`}
                                checked={question.isAutoGenerated || false}
                                onCheckedChange={(checked) => {
                                  if (checked && !question.text) {
                                    // 스위치 ON이고 내용이 비어있으면 AI 생성 실행
                                    generateQuestionWithAI(question.id);
                                  } else {
                                    // 스위치 상태 업데이트
                                    updateQuestion(
                                      question.id,
                                      "isAutoGenerated",
                                      checked
                                    );
                                  }
                                }}
                              />
                            </div>
                          </div>
                        </div>
                        {question.isGenerating && (
                          <div className="flex items-center justify-center p-4 bg-blue-50 border border-blue-200 rounded-md mb-2">
                            <div className="flex items-center gap-2 text-blue-600">
                              <div className="animate-spin rounded-full h-4 w-4 border-2 border-blue-600 border-t-transparent"></div>
                              <span className="text-sm font-medium">
                                AI가 문제를 생성하고 있습니다...
                              </span>
                            </div>
                          </div>
                        )}
                        <RichTextEditor
                          value={question.text}
                          onChange={(value) =>
                            updateQuestion(question.id, "text", value)
                          }
                          placeholder={
                            question.isAutoGenerated
                              ? "AI가 자동으로 생성한 문제입니다. 필요시 수정하세요."
                              : "여기에 문제를 입력하세요..."
                          }
                          className="min-h-[300px]"
                        />
                        {question.isAutoGenerated && (
                          <div className="space-y-2 mt-3">
                            <Label>AI 명령어</Label>
                            <div className="flex gap-2">
                              <Input
                                value={question.aiCommand || ""}
                                onChange={(e) =>
                                  updateQuestion(
                                    question.id,
                                    "aiCommand",
                                    e.target.value
                                  )
                                }
                                placeholder="예: 이 문제를 더 어렵게 만들어줘, 또는 다른 예시를 들어서 설명해줘"
                                className="flex-1"
                              />
                              <Button
                                type="button"
                                variant="outline"
                                size="sm"
                                onClick={(e) => {
                                  e.preventDefault();
                                  generateQuestionWithAI(question.id);
                                }}
                                disabled={
                                  question.isGenerating ||
                                  !question.aiCommand?.trim()
                                }
                              >
                                {question.isGenerating ? "수정 중..." : "적용"}
                              </Button>
                            </div>
                            <p className="text-xs text-muted-foreground">
                              AI에게 문제 수정이나 개선을 요청할 수 있습니다.
                            </p>
                          </div>
                        )}
                      </div>
                      <div className="space-y-2">
                        <Label>문제 핵심 역량</Label>
                        <Textarea
                          value={question.core_ability}
                          onChange={(e) =>
                            updateQuestion(
                              question.id,
                              "core_ability",
                              e.target.value
                            )
                          }
                          placeholder="여기에 문제 핵심 역량을 입력하세요..."
                          rows={7}
                          className="min-h-[100px]"
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Submit */}
        <div className="flex gap-4">
          <Button
            type="button"
            variant="outline"
            onClick={() => router.push("/instructor")}
          >
            취소
          </Button>
          <Button
            type="submit"
            disabled={isLoading}
            className={
              !examData.title ||
              !examData.code ||
              questions.length === 0 ||
              !canAddMoreFiles
                ? "opacity-50 cursor-not-allowed"
                : ""
            }
          >
            {isLoading ? "만들기 중..." : "시험 만들기"}
          </Button>
        </div>
      </form>
    </div>
  );
}
